#!/usr/bin/env stap++

/*
 * Copyright (C) Yichun Zhang (agentzh)
 */

global active_reqs
global recv_begin
global queries
global sending

probe @pfunc(ngx_http_process_request)
{
    sending = 0
    active_reqs[$r] = 1
}

probe @pfunc(ngx_http_lua_socket_udp_send)
{
    sending = 1
}

probe @pfunc(ngx_unix_send)
{
    if (sending) {
        //warn(sprintf("HERE: %d, %.*s", $size, $size, user_string_n_quoted($buf, $size)))
        sending = 0
        size = $size
        query = ""
        for (i = 0; i < size; i++) {
            query .= sprintf(" %02x", $buf[i])
        }
        queries[$c] = query
    }
}

probe @pfunc(ngx_http_lua_socket_udp_read)
{
    r = $r
    u = $u
    sending = 0
    if (active_reqs[r]) {
        if (!recv_begin[r, u]) {
            recv_begin[r, u] = gettimeofday_us()
        }
    }
}

probe @pfunc(ngx_http_lua_socket_udp_finalize)
{
    sending = 0
    delete queries[$u->udp_connection->connection]
}

probe @pfunc(ngx_http_log_request)
{
    sending = 0
    delete active_reqs[$r]
}

probe @pfunc(ngx_http_lua_socket_udp_receive_retval_handler)
{
    sending = 0
    r = $r
    u = $u
    begin = recv_begin[r, u]
    if (begin) {
        elapsed = gettimeofday_us() - begin
        if (elapsed >= $^arg_threshold :default(1000000)) {
            warn(sprintf("u->ft_type: %d, elapsed: %dus", $u->ft_type,
                         elapsed))
            query = queries[$u->udp_connection->connection]
            printf("%s", query)
            exit()
        }
    }
    delete recv_begin[r, u]
}

probe begin {
    warn(sprintf("Start tracing process %d ($^exec_path)...\n", target()))
    warn(sprintf("Hit Ctrl-C to end.\n"))
}

