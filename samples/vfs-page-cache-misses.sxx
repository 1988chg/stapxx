#!/usr/bin/env stap++

# Inspired by Josh Stone's stap script posted on the systemtap
# mailing list: https://sourceware.org/ml/systemtap/2011-q2/msg00157.html

global pages, active
global total_paged
global miss
global misses

probe $^arg_probe :default(vfs.read) {
    if (pid() == target()) {
        active = 1
        pages = 0
    }
}

probe vfs.add_to_page_cache.return {
    if (pid() == target() && active) {
        //printf("nrpages: %d, size: %d\n", $mapping->nrpages, size)
        pages += size
        miss = 1
    }
}

probe $^arg_probe.return {
    if (pid() == target() && active) {
        active = 0

        total_paged <<< pages

        if (miss) {
            misses <<< 1
            miss = 0

        } else {
            misses <<< 0
        }
    }
}

probe timer.s($^arg_period :default(2)) {
    total = @count(misses)
    if (total == 0) {
        printf("No $^arg_probe observed in the last $^arg_period seconds.\n")

    } else {
        printf("%d $^arg_probe operations, %d pages added (page size: %dB), page cache miss rate: %d%%\n",
               total, @sum(total_paged), mem_page_size(),
               @sum(misses) * 100 / total)

        delete misses
        delete total_paged
    }
}

probe begin {
    printf("Tracing %d...\nHit Ctrl-C to end.\n\n", target())
}
