#!/usr/bin/env stap++

@use nginx.lua
@use luajit

@define TSTR    %( 4 %)
@define TUPVAL  %( 5 %)
@define TTHREAD %( 6 %)
@define TPROTO  %( 7 %)
@define TFUNC   %( 8 %)
@define TTRACE  %( 9 %)
@define TCDATA  %( 10 %)
@define TTAB    %( 11 %)
@define TUDATA  %( 12 %)

@define sizeof_GG_State %( &@cast(0, "GG_State", "$^libluajit_path")[1] %)
@define sizeof_lua_State %( &@cast(0, "struct lua_State", "$^libluajit_path")[1] %)
@define sizeof_GCRef %( &@cast(0, "GCRef", "$^libluajit_path")[1] %)

global typenames
global gcobjs
global strhash_size

probe @pfunc(ngx_process_events_and_timers)
{
    L = ngx_lua_get_main_lua_vm()
    //printf("L = %p\n", L)
    G = luajit_G(L)
    $*G := @cast(G, "global_State", "$^libluajit_path")

    $*o := @cast(o, "GCobj", "$^libluajit_path")

    printf("GC total size: %d bytes\n", $*G->gc->total)

    for (p = &$*G->gc->root; p; p = &$*o->gch->nextgc) {
        o = luajit_gcref(p)
        if (o == 0) {
            break
        }
        //printf("gct: %d\n", $*o->gch->gct)
        gct = $*o->gch->gct
        gcobjs[$*o->gch->gct] <<< luajit_objlen(o, gct)
    }

    strmask = $*G->strmask
    strnum = $*G->strnum
    strhash = $*G->strhash
    $*strhash := @cast(strhash, "GCRef", "$^libluajit_path")

    n = 0
    done = 0
    for (i = 0; i <= strmask; i++) {
        p = &$*strhash[i]

        while (p) {
            o = luajit_gcref(p)
            if (o == 0) {
                break;
            }

            $*o := @cast(o, "GCobj", "$^libluajit_path")
            gct = $*o->gch->gct
            if (gct != @TSTR) {
                error(sprintf("Bad string type: %d", gct))
            }
            size = luajit_objlen(o, @TSTR)
            //printf("%s: %d\n", typenames[@TSTR], size)
            gcobjs[@TSTR] <<< size

            if (++n == strnum) {
                done = 1
                break
            }

            p = &$*o->gch->nextgc
        }

        if (done) {
            break
        }
    }

    strhash_size = (strmask + 1) * @sizeof_GCRef

    printf("strmask: %d, strnum: %d, strings: %d\n", strhash, strnum, n)
    printf("GC state: %d\n", $*G->gc->state)
    exit()
}

probe end {
    total = 0
    foreach (t in gcobjs- limit 100) {
        printf("%d %s objects: max=%d, avg=%d, min=%d, sum=%d\n",
               @count(gcobjs[t]), typenames[t], @max(gcobjs[t]),
               @avg(gcobjs[t]), @min(gcobjs[t]), @sum(gcobjs[t]))
        total += @sum(gcobjs[t])
    }

    total += strhash_size + @sizeof_GG_State - @sizeof_lua_State
    printf("The GC walker detected for total %d bytes.\n", total)
}

probe begin {
    typenames[@TSTR] = "string"
    typenames[@TUPVAL] = "upvalue"
    typenames[@TTHREAD] = "thread"
    typenames[@TPROTO] = "proto"
    typenames[@TFUNC] = "function"
    typenames[@TTRACE] = "trace"
    typenames[@TCDATA] = "cdata"
    typenames[@TTAB] = "table"
    typenames[@TUDATA] = "userdata"

    printf("Start tracing %d ($^exec_path)\n", target())
}
