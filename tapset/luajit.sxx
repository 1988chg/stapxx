// module luajit


@define TSTR    %( 4 %)
@define TUPVAL  %( 5 %)
@define TTHREAD %( 6 %)
@define TPROTO  %( 7 %)
@define TFUNC   %( 8 %)
@define TTRACE  %( 9 %)
@define TCDATA  %( 10 %)
@define TTAB    %( 11 %)
@define TUDATA  %( 12 %)

@define FF_LUA %( 0 %)
@define FF_C   %( 1 %)

@define sizeof_GCtab  %( &@cast(0, "GCtab", "$^libluajit_path")[1] %)
@define sizeof_TValue  %( &@cast(0, "TValue", "$^libluajit_path")[1] %)
@define sizeof_lua_State %( &@cast(0, "struct lua_State", "$^libluajit_path")[1] %)
@define sizeof_GCfunc %( &@cast(0, "union GCfunc", "$^libluajit_path")[1] %)
@define sizeof_GCupval %( &@cast(0, "GCupval", "$^libluajit_path")[1] %)
@define sizeof_GCstr %( &@cast(0, "GCstr", "$^libluajit_path")[1] %)
@define sizeof_GCudata %( &@cast(0, "GCudata", "$^libluajit_path")[1] %)
@define sizeof_Node %( &@cast(0, "Node", "$^libluajit_path")[1] %)
@define sizeof_GCfuncC %( &@cast(0, "GCfuncC", "$^libluajit_path")[1] %)
@define sizeof_GCfuncL %( &@cast(0, "GCfuncL", "$^libluajit_path")[1] %)
@define sizeof_GCRef %( &@cast(0, "GCRef", "$^libluajit_path")[1] %)
@define sizeof_GCtrace %( &@cast(0, "GCtrace", "$^libluajit_path")[1] %)
@define sizeof_IRIns %( &@cast(0, "IRIns", "$^libluajit_path")[1] %)
@define sizeof_IRRef %( &@cast(0, "IRRef", "$^libluajit_path")[1] %)
@define sizeof_SnapShot %( &@cast(0, "SnapShot", "$^libluajit_path")[1] %)
@define sizeof_SnapEntry %( &@cast(0, "SnapEntry", "$^libluajit_path")[1] %)
@define sizeof_K64Array %( &@cast(0, "K64Array", "$^libluajit_path")[1] %)


function luajit_G(L)
{
    $*L := @cast(L, "lua_State", "$^libluajit_path")
    return $*L->glref->ptr32
}


function luajit_gcref(r)
{
    $*r := @cast(r, "GCRef", "$^libluajit_path")
    return $*r->gcptr32
}


function luajit_isluafunc(fn)
{
    $*fn := @cast(fn, "GCfunc", "$^libluajit_path")
    //printf("ffid: %d\n", $*fn->c->ffid)
    return $*fn->c->ffid == @FF_LUA
}


function luajit_objlen(o, gct)
{
    $*o := @cast(o, "GCobj", "$^libluajit_path")
    if (gct == @TSTR) {
        /*
        if ($*o->str->len == 0) {
            printf("empty string found.\n")
        }
        */
        return $*o->str->len + 1 + @sizeof_GCstr
    }

    if (gct == @TTAB) {
        t = &$*o->tab
        $*t := @cast(t, "GCtab", "$^libluajit_path")
        asize = $*t->asize
        hmask = $*t->hmask

        n = 0
        if (hmask > 0) {
            n += @sizeof_Node * (hmask + 1)
        }

        if (asize > 0 && $*t->colo <= 0) {
            n += @sizeof_TValue * asize
        }

        if ($*t->colo) {
            n += ($*t->colo & 0x7f) * @sizeof_TValue + @sizeof_GCtab

        } else {
            n += @sizeof_GCtab
        }

        return n
    }

    if (gct == @TUDATA) {
        return $*o->ud->len + @sizeof_GCudata
    }

    if (gct == @TPROTO) {
        return $*o->pt->sizept
    }

    if (gct == @TTHREAD) {
        L = &$*o->th
        //printf("open upval: %p\n", luajit_gcref(&$*L->openupval))
        //printf("lua_State: %d\n", @sizeof_lua_State)
        n = @sizeof_lua_State + $*L->stacksize * @sizeof_TValue
        p = &$*L->openupval
        while (p) {
            o = luajit_gcref(p)
            if (o == 0) {
                break;
            }

            $*o := @cast(o, "GCobj", "$^libluajit_path")
            gct = $*o->gch->gct
            size = luajit_objlen(o, gct)
            //printf("%s: %d\n", typenames[@TSTR], size)
            n += size
            p = &$*o->gch->nextgc
        }

        return n
    }

    if (gct == @TFUNC) {
        fn = &$*o->fn
        if (luajit_isluafunc(fn)) {
            n = $*fn->l->nupvalues
            //n = 0
            return @sizeof_GCfuncL - @sizeof_GCRef + @sizeof_GCRef * n
        }

        n = $*fn->c->nupvalues
        //n = 0
        return @sizeof_GCfuncC - @sizeof_TValue + @sizeof_TValue * n
    }

    if (gct == @TUPVAL) {
        return @sizeof_GCupval
    }

    if (gct == @TTRACE) {
        T = o
        $*T := @cast(T, "GCtrace", "$^libluajit_path")
        return ((@sizeof_GCtrace + 7) & ~7)
               + ($*T->nins - $*T->nk) * @sizeof_IRIns
               + $*T->nsnap * @sizeof_SnapShot
               + $*T->nsnapmap * @sizeof_SnapEntry
    }

    return 0
}


function luajit_jit_state_size(J)
{
    $*J := @cast(J, "jit_State", "$^libluajit_path")

    ir_k64_size = 0
    $*k := @cast(k, "K64Array", "$^libluajit_path")
    for (k = $*J->k64->ptr32; k; ) {
        ir_k64_size += @sizeof_K64Array
        k = $*k->next->ptr32
    }
    if (ir_k64_size) {
        printf("64-bit constants: %d\n", ir_k64_size)
    }

    sizesnapmap = $*J->sizesnapmap * @sizeof_SnapEntry
    if (sizesnapmap) {
        //printf("JIT snap map buffer size: %d\n", sizesnapmap)
    }

    sizesnap = $*J->sizesnap * @sizeof_SnapShot
    if (sizesnap) {
        //printf("JIT snap buffer size: %d\n", sizesnap)
    }

    sizeirbuf = ($*J->irtoplim - $*J->irbotlim) * @sizeof_IRIns
    if (sizeirbuf) {
        //printf("JIT IR buffer size: %d\n", sizeirbuf)
    }

    sizetrace = $*J->sizetrace * @sizeof_GCRef
    if (sizetrace) {
        //printf("JIT trace array size: %d\n", sizetrace)
    }

    return ir_k64_size + sizesnapmap + sizesnap + sizeirbuf + sizetrace
}
